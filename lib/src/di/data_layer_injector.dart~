
import 'package:dio/dio.dart';
import 'package:get_it/get_it.dart';
import 'package:pretty_dio_logger/pretty_dio_logger.dart';
import 'package:shared_preferences/shared_preferences.dart';

final injector = GetIt.instance;

Future<void> initializeDataDependencies() async {
  injector.registerLazySingleton(() => Dio()
    ..options.baseUrl = "https://api.cityeye.eg/api/v1/"
    ..interceptors.add(ChuckerDioInterceptor())
    ..interceptors.add(PrettyDioLogger(
      requestHeader: false,
      requestBody: true,
      responseBody: true,
      responseHeader: false,
      compact: false,
    )));

  final SharedPreferences sharedPreferences =
      await SharedPreferences.getInstance();

  injector.registerLazySingleton<SharedPreferences>(() => sharedPreferences);

  injector.registerSingleton<LoginAPIService>(LoginAPIService(injector()));

  injector
      .registerSingleton<SettingsAPIService>(SettingsAPIService(injector()));

  injector
      .registerSingleton<RegisterAPIService>(RegisterAPIService(injector()));

  injector.registerSingleton<ProfileAPIService>(ProfileAPIService(injector()));

  injector.registerSingleton<ServiceDetailsCartApiService>(
      ServiceDetailsCartApiService(injector()));

  injector
      .registerSingleton<ContactUsAPIService>(ContactUsAPIService(injector()));

  injector.registerSingleton<PaymentAPIService>(PaymentAPIService(injector()));

  injector.registerSingleton<WallAPIService>(WallAPIService(injector()));

  injector.registerSingleton<GetHomeCompoundAPIService>(
      GetHomeCompoundAPIService(injector()));

  injector.registerSingleton<LandingAPIService>(LandingAPIService(injector()));

  injector.registerSingleton<EventsAPIServices>(EventsAPIServices(injector()));

  injector.registerSingleton<SurveyAPIServices>(SurveyAPIServices(injector()));

  injector.registerSingleton<SupportAPIService>(SupportAPIService(injector()));

  injector.registerSingleton<QrAPIService>(QrAPIService(injector()));

  injector
      .registerSingleton<DelegatedAPIService>(DelegatedAPIService(injector()));

  injector.registerSingleton<NotificationApiService>(
      NotificationApiService(injector()));

  injector.registerSingleton<CommunityRequestAPIService>(
      CommunityRequestAPIService(injector()));
  injector
      .registerSingleton<ComplainAPIService>(ComplainAPIService(injector()));
  injector.registerFactory<TimerTicker>(() => const TimerTicker());

  injector.registerSingleton<ResetPasswordService>(
      ResetPasswordService(injector()));

  injector.registerSingleton<BadgeIdentityApiServices>(BadgeIdentityApiServices(injector()));
  injector.registerSingleton<ComplainListAPIService>(ComplainListAPIService(injector()));
  injector.registerSingleton<FacilitiesAPIServices>(FacilitiesAPIServices(injector()));
}
